?dist
>hclust
?hclust
setwd("C:/Users/Usman shah/OneDrive/Desktop/INFO304/Assignment1/Assn1(2)")
#Read the data from the file.
# Load the lattice package
library("lattice")
library("tsne")
data = read.csv("countrystats.csv", header=T, sep=",")
head(data)
head(data)
#change the row name to be the country name
row.names(data)<-data[,1]
row.names(data)
#Delete the country name coloumn, which is the firsr coulumn.
data <- data[,-1]
head(data)
rowNames <-row.names(data)
# 2. Which country look similar to New Zealand? Which country is the strongges or the weekest?
# scale the data and create a distance matrix
dataDist <-dist(scale(data))
# Hierarchical clustered dendrogram with average algorithmative method.
dataDend <-hclust(dataDist,method="average")
plot(dataDend)
plot(head(dataDend)
plot(head(dataDend)
plot(dataDend)
plot(dataDend)
# Hierarchical clustered dendrogram with average algorithmative method.
dataDend <-hclust(dataDist,method="average")
plot(dataDend)
plot(clusters)
plot(dataDend)
# Hierarchical clustered dendrogram with complete algorithmative method.
dataCom <-hclust(dataDist,method="complete")
# Cut the dendrogram into 50 clusters
clusters <- cutree(dataCom, k = 50)
plot(clusters)
# Hierarchical clustered dendrogram with average algorithmative method.
dataDend <-hclust(dataDist,method="average")
plot(dataDend)
plot(dataDend)
# Hierarchical clustered dendrogram with average algorithmative method.
dataDend <-hclust(dataDist,method="average")
plot(dataDend)
# Hierarchical clustered dendrogram with complete algorithmative method.
dataCom <-hclust(dataDist,method="complete")
plot(dataCom)
# Cut the dendrogram into 50 clusters
clusters <- cutree(dataCom, k = 50)
plot(clusters)
## Using dimentionaly reduction method t-SNE to create a 2 dimentional plot of the data.
tsnee <- tsne(data, initial_config = NULL, k = 2,
max_iter = 50, min_cost = 0, epoch_callback = NULL, whiten = TRUE,
epoch=100)
plot(tsnee)
text(x = tsnee[,1],y = tsnee[,2],labels=row.names(data))
#
# Assume we are given a table with a single response variable
# Want to make a table with the (x) and (y) values as 2 columns
#
# IN: d - the dataframe or matrix
#     response.var - the number of the column used as the response variable.  Defaults to last column
# OP: Calculates the normalised distance between each pair of data items in explanatory space
#     and the distance between their response variables.
# OUT: Data frame with 2 columns, the distance in feature space (x), and distance in response space (y)
########################################################################################################
dist.table <- function(d, response.var = ncol(d))
{
d <- scale(d) # scale data
d.dist <- dist(d[,-response.var])  # distance all X values
d.resp <- dist(d[,response.var])
d.dist <- (d.dist-min(d.dist))/(max(d.dist)-min(d.dist))
d.resp <- (d.resp-min(d.resp))/(max(d.resp)-min(d.resp))
data.frame(cbind(d.dist,d.resp))
}
#
# Example with simple linear response, random X1 and X2 but no noise for response
#
X1 <- runif(100)
X2 <- runif(100)
Y <- X1 + X2
#
ex1 <- data.frame(cbind(X1,X2,Y))
d <- dist.table(ex1, response.var = 3)
plot(x=d$d.dist, y = d$d.resp,xlab="Normalised Distance in Feature Space",
ylab="Normalised Distance in Response Space",cex=0.5)
#
# Assume we are given a table with a single response variable
# Want to make a table with the (x) and (y) values as 2 columns
#
# IN: d - the dataframe or matrix
#     response.var - the number of the column used as the response variable.  Defaults to last column
# OP: Calculates the normalised distance between each pair of data items in explanatory space
#     and the distance between their response variables.
# OUT: Data frame with 2 columns, the distance in feature space (x), and distance in response space (y)
########################################################################################################
dist.table <- function(d, response.var = ncol(d))
{
d <- scale(d) # scale data
d.dist <- dist(d[,-response.var])  # distance all X values
d.resp <- dist(d[,response.var])
d.dist <- (d.dist-min(d.dist))/(max(d.dist)-min(d.dist))
d.resp <- (d.resp-min(d.resp))/(max(d.resp)-min(d.resp))
data.frame(cbind(d.dist,d.resp))
}
#
# Example with simple linear response, random X1 and X2 but no noise for response
#
X1 <- runif(100)
print(x1)
print(X1)
read.csv(‘network.csv’,header=TRUE)
read.csv("network.csv",header=TRUE)
data -> read.csv("network.csv",header=TRUE)
data <- read.csv("network.csv",header=TRUE)
head(data)
# What is the maximum and minimum degree for this network?
maxDegree <- colMax(data)
# What is the maximum and minimum degree for this network?
colMax <- function(data) sapply(data, max, na.rm = TRUE)
max(k$k, na.rm = TRUE)
max(dat$k, na.rm = TRUE)
max(data$k, na.rm = TRUE)
min(data$k)
# What is the maximum and minimum degree for this network?
max(data$k)
data <- read.csv("network.csv",header=TRUE, sep=",")
head(data)
# What is the maximum and minimum degree for this network?
max(data$k)
# Tha maximum degree is 183.
min(data$k)
plot(data)
# The minimum degree is 5.
# 3: Produce a single figure showing two plots.
hist(data$k)
plot(hist(data$k))
plot(hist)
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k)
plot(data)
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k)
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k,
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k,
lines(x, y, type=opts[i]))
?lines.histogram
?lines.histogram
help("lines.histogram")
help("lines")
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k,
lines(data$k, y = NULL))
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k,
lines(data$k, y = data$nodeid))
NULL
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k,
lines(data$k, y = NULL))
plot(data)
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k,
lines(data$k, y = NULL))
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k,
lines(data$k, y = NULL))
plot(data)
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k,
lines(data$k, y = NULL))
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k,
lines(data$k, y = NULL))
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k,
lines(data$nodeid, y = NULL))
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k,
lines())
plot(data)
data <- read.csv("network.csv",header=TRUE, sep=",")
plot(data)
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k,
lines(x=data$nodeid, y = data$k))
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k)
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k,
lines(x=data$k, y = NULL))
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k)
help("line")
line(x=data$k, y = NULL))
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k,
line(x=data$k, y = NULL))
# The minimum degree is 5.
# 3: Produce a single figure showing two plots: the histogram of the degree,
# and a line plot sorted by degree. Comment on what this tells you about the network.
hist(data$k)
lines(x=data$k, y = NULL))
lines(x=data$k, y = NULL)
plot(data)
